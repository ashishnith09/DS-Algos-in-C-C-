#include<stdio.h>
#include<stdlib.h>

typedef struct Heap
{
	int *array;
	int count;
	int capacity;
}heap;

heap*createheap(int capacity)
{
	heap*h=(heap*)malloc(sizeof(heap));
	h->capacity=capacity;
	h->array=(int*)malloc(capacity*sizeof(int));
	h->count=0;
	return h;
}


void resizeheap(heap*h)
{
	int*array_old=h->array;
	h->array=(int*)malloc(sizeof(int)*h->capacity*2);
	
	for(int i=0;i<h->capacity;i++)
	h->array[i]=array_old[i];
	
	h->capacity*=2;
	
	free(array_old);
}

void insert(heap*h,int d)
{
	int i;
	if(h->count==h->capacity)
	resizeheap(h);
	
	h->count++;
	i=h->count-1;
	h->array[i]=d;
	
	while(i>0 && h->array[(i-1)/2]<d)
	{
		h->array[i]=h->array[(i-1)/2];
		i=(i-1)/2;
	}
	h->array[i]=d;
	
}

int parent(heap*h,int i)
{
	if(i<=0 || i>=h->count)
	return -1;
	
	return h->array[(i-1)/2];
}

int leftchild(heap*h,int i)
{
	int left=2*i+1;
	if(left>=h->count)
	return -1;
	
	return h->array[left];
}

int rightchild(heap*h,int i)
{
	int right=2*i+2;
	if(right>=h->count)
	return -1;
	
	return h->array[right];
}

void heapify(heap*h,int i)
{
	
}

int main()
{
	heap*h=createheap(10);
	//inserting an element
	insert(h,10);
	insert(h,7);
	insert(h,31);
	insert(h,8);
	insert(h,5);
	insert(h,1);
	insert(h,14);
	insert(h,12);
	insert(h,16);
	insert(h,2);
	for(int i=0;i<h->capacity;i++)
	printf(" %d",h->array[i]);
	
	
	printf("\nParent of node at 2th location is = %d\n",parent(h,2));
	printf("left child at index 3th is %d and right child is = %d", leftchild(h,3),rightchild(h,3));
	return 0;
}
