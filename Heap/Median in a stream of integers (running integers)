#include<stdio.h>
#include<stdlib.h>
#define maxsize 128

typedef struct Maxheap
{
	int *array;
	int capacity;
	int count;
}maxheap;

typedef struct Minheap
{
	int*array;
	int capacity;
	int count;
}minheap;

minheap*createminheap(int capacity)
{
	minheap*h=(minheap*)malloc(sizeof(minheap));
	h->capacity=capacity;
	h->count=0;
	h->array=(int*)malloc(sizeof(int)*capacity);
	return h;
}

maxheap*createmaxheap(int capacity)
{
	maxheap*h=(maxheap*)malloc(sizeof(maxheap));
	h->capacity=capacity;
	h->count=0;
	h->array=(int*)malloc(sizeof(int)*h->capacity);
	return h;
}

int signum(int a,int b)
{
	if(a==b)
	return 0;
	
	return a<b ? -1:1;
}

int countmax(maxheap*l)
{
	return l->count;
}

int countmin(minheap*r)
{
	return r->count;
}

int maxtop(maxheap*l)
{
	return l->array[0];
}

int mintop(minheap*r)
{
	return r->array[0];
}

void insertmaxheap(maxheap*l,int d)
{
	int i;
	l->count++;
	i=l->count-1;
	while(i>0 && l->array[(i-1)/2]<d)
	{
		l->array[(i)]=l->array[(i-1)/2];
		i=(i-1)/2;
	}
	l->array[i]=d;	
}

void insertminheap(minheap*r,int d)
{
	int i;
	r->count++;
	i=r->count-1;
	while(i>0 && r->array[(i-1)/2]>d)
	{
		r->array[(i)]=r->array[(i-1)/2];
		i=(i-1)/2;
	}
	r->array[i]=d;
}

int average(int a,int b)
{
	return (a+b)/2;
}

int left(int i)
{
	return 2*i+1;
}

int right(int i)
{
	return 2*i+2;
}

void perlocatedownmin(minheap*r,int i)
{
	int l=left(i);
	int rt=right(i);
	
	int min=i,temp;
	if(l<r->capacity && r->array[l]<r->array[i])
	min=l;
	else
	min=i;
	if(rt<r->capacity && r->array[rt]<r->array[min])
	min=rt;
	
	if(min!=i)
	{
		temp=r->array[i];
		r->array[i]=r->array[min];
		r->array[min]=temp;
		perlocatedownmin(r,min);
	}
}

void perlocatedownmax(maxheap*r,int i)
{
	int l=left(i);
	int rt=right(i);
	
	int max=i,temp;
	if(l<r->capacity && r->array[l]>r->array[i])
	max=l;
	else
	max=i;
	if(rt<r->capacity && r->array[rt]>r->array[max])
	max=rt;
	
	if(max!=i)
	{
		temp=r->array[i];
		r->array[i]=r->array[max];
		r->array[max]=temp;
		perlocatedownmax(r,max);
	}
}

void deletemin(minheap*r)
{
	int temp=r->array[0];
	r->array[0]=r->array[r->count-1];
	r->count--;
	perlocatedownmin(r,0);
}

void deletemax(maxheap*l)
{
	int temp=l->array[0];
	l->array[0]=l->array[l->count-1];
	l->count--;
	perlocatedownmax(l,0);
}

int getmedian(int e,int m,maxheap*l,minheap*r)
{
	int sig=signum(countmax(l),countmin(r));
	
	switch(sig)
	{
		//no of elements in left tree is more than right
		case 1:
			if(e<m)
			{
				insertminheap(r,maxtop(l));
				deletemax(l);
				insertmaxheap(l,e);
			}
			else
			insertminheap(r,e);
		
		m=average(maxtop(l),mintop(r));
		break;
		
		//no elements in both left and right sub tree are equal
		case 0:
			if(e<m)
			{
				insertmaxheap(l,e);
				m=maxtop(l);
			}
			else
			{
			insertminheap(r,e);
			m=mintop(r);
		}
			break;
			
		case -1:
			if(e<m)
			{
				insertmaxheap(l,e);
				
			}
			else
			{
				insertmaxheap(l,mintop(r));
				deletemin(r);
				insertminheap(r,e);
			}
			
			m=average(mintop(r),maxtop(l));
			break;
			
	}
	
	return m;
}

void printmedian(int a[],int n)
{
	int m=0;
	maxheap*left=createmaxheap(n);
	minheap*right=createminheap(n);
	
	for(int i=0;i<n;i++)
	{
		m=getmedian(a[i],m,left,right);
		printf("%d ",m);
	}
}

int main()
{
	int a[]={5,15,1,3,2,8,7,9,10,6,11,4};
	int size=sizeof(a)/sizeof(a[0]);
	printmedian(a,size);
	return 0;
}
