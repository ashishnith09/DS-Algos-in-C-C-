#include<stdio.h>

#include<stdlib.h>

typedef struct dll

{

int data;

struct dll*prev;

struct dll*next;

}Dll;

Dll*createnode(int d)

{

Dll*newnode=(Dll*)malloc(sizeof(Dll));

newnode->data=d;

newnode->prev=NULL;

newnode->next=NULL;

return newnode;

}

void insertfront(Dll**headf,Dll**tail,int d)

{

Dll*newnode=createnode(d);

if(*headf==NULL)

{

newnode->next=*headf;

newnode->prev=*headf;

*headf=newnode;

*tail=newnode;

return;

}

newnode->next=*headf;

(*headf)->prev=newnode;

newnode->prev=NULL;

(*headf)=newnode;

}

void insertlast(Dll**headf,Dll**tail,int d)

{

Dll*temp=*headf;

Dll*newnode=createnode(d);

if(*headf==NULL)

{

newnode->next=*headf;

newnode->prev=*headf;

*headf=newnode;

*tail=newnode;

return;

}

newnode->prev=*tail;

(*tail)->next=newnode;

newnode->next=NULL;

*tail=newnode;

}

void deletefront(Dll**headf,Dll**tail)

{

Dll*temp=*headf;

if(*headf==NULL)

{

printf("\nQueue is Empty\n");

return;

}

if((*headf)->next==NULL)

{

*headf=NULL;

*tail==NULL;

}

else

{

(*headf)=(*headf)->next;

(*headf)->prev=NULL;

}

free(temp);

}

void deletelast(Dll**headf,Dll**tail)

{

Dll*temp=*tail;

if(*headf==NULL)

{

printf("\nqueue is empty\n");

return;

}

if((*headf)->next==NULL)

{

*headf=NULL;

*tail=NULL;

}

else

{

(*tail)->prev->next=(*tail)->next;

(*tail)=(*tail)->prev;

}

free(temp);

}

void print(Dll*headf)

{

Dll*curr=headf;

if(curr==NULL)

{

printf("\nUndeflow\n");

return;

}

while(curr)

{

printf("%d->",curr->data);

curr=curr->next;

}

printf("\n");

}

int getfront(Dll*headf)

{

if(headf==NULL)

{

printf("\nunderflow\n");

exit(0);

}

else

return(headf->data);

}

int getrear(Dll*tail)

{

if(tail==NULL)

{

printf("\nunderflow\n");

exit(0);
}

else

return(tail->data);

}

int main()

{

Dll*head=NULL;

Dll*tail=NULL;

insertfront(&head,&tail,7);

insertfront(&head,&tail,8);

print(head);

printf("\nfront element is=%d\n",getfront(head));

printf("\nRear element is=%d\n",getrear(tail));

deletefront(&head,&tail);

print(head);

insertlast(&head,&tail,9);

insertlast(&head,&tail,10);

insertlast(&head,&tail,11);

insertfront(&head,&tail,12);

print(head);

printf("\nfront element is=%d\n",getfront(head));

printf("\nRear element is=%d\n",getrear(tail));

insertfront(&head,&tail,13);

print(head);

deletefront(&head,&tail);

print(head);

deletefront(&head,&tail);

print(head);

deletelast(&head,&tail);

print(head);

deletelast(&head,&tail);

print(head);

deletelast(&head,&tail);

print(head);

deletelast(&head,&tail);

deletefront(&head,&tail);

print(head);

return 0;

}
