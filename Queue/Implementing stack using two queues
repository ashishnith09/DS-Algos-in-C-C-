#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int data;
	struct Node*next;
}node;

typedef struct Queue
{
	node*rear,*front;
}queue;

typedef struct Stack
{
	queue*q1;
	queue*q2;
}stack;

node*createnode(int d)
{
	node*n=(node*)malloc(sizeof(node));
	n->data=d;
	n->next=NULL;
	return n;
}
queue*createqueue()
{
	queue*q=(queue*)malloc(sizeof(queue));
	q->rear=NULL;
	q->front=NULL;
	return q;
}

stack*createstack()
{
	stack*s=(stack*)malloc(sizeof(stack));
	s->q1=createqueue();
	s->q2=createqueue();
	return s;
}

void enqueue(queue*q,int d)
{
	node*n=createnode(d);
	if(q->front==NULL)
	{
	q->front=q->rear=n;
	return;
	}
	else
	{
		q->rear->next=n;
		q->rear=n;
	}
}

void push(stack*s,int d)
{
	if(s->q1->front==NULL)
	{
		enqueue((s->q2),d);
	}
	else
	enqueue(s->q1,d);
	printf("Element %d inserted to stack\n",d);
}

int dequeue(queue*q)
{
	node*temp=q->front;
	int d=temp->data;
	q->front=q->front->next;
	free(temp);
	return d;
}

int pop(stack*s)
{
	if(s->q1->front==NULL && s->q2->front==NULL)
	{
			printf("stack is empty\n");
		exit(0);
	}
	if(s->q1->front!=NULL)
	{
		while(s->q1->front->next!=NULL)
		{
			int x=dequeue(s->q1);
			enqueue(s->q2,x);
		}
		return dequeue(s->q1);
	}
	else if(s->q2->front!=NULL)
	{
		while(s->q2->front->next!=NULL)
		{
			int x=dequeue(s->q2);
			enqueue(s->q1,x);
		}
			return dequeue(s->q2);
	}

}

int main()
{
	stack*s=createstack();
	push(s,10);
	push(s,20);
	push(s,30);
	push(s,40);
	printf("\nElement %d popped from queue\n",pop(s));
	printf("Element %d popped from queue\n",pop(s));
	pop(s);
	printf("Element %d popped from queue\n",pop(s));
	printf("Element %d popped from queue\n",pop(s));
	return 0;
}
