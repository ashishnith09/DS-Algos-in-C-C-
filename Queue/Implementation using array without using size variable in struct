#include<stdio.h>
#include<stdlib.h>

typedef struct Queue
{
	int rear,front;
	int capacity;
	int*array;
}queue;

queue*createqueue(int capacity)
{
	queue*q=(queue*)malloc(sizeof(queue));
	q->capacity=capacity;
	q->rear=q->front=-1;
	q->array=(int*)malloc(sizeof(int)*capacity);
	return q;
}

int Isfull(queue*q)
{
	return (q->rear+1)%q->capacity==q->front;
}

int Isempty(queue*q)
{
	return q->front==-1;
}

void enqueue(queue*q,int d)
{
	if(Isfull(q))
	{
		printf("Queue is full\n");
		return;
	}
	q->rear=(++q->rear)%q->capacity;
	q->array[q->rear]=d;
	if(q->front==-1)
	q->front=q->rear;
	printf("Element %d inserted to Queue\n",d);
}

int dequeue(queue*q)
{
	if(Isempty(q))
	{
		printf("Queue is empty\n");
		return 0;
	}
	int d=q->array[q->front];
	if(q->front==q->rear)
	{
		q->front=q->rear=-1;
	}
	else
	q->front=(q->front+1)%q->capacity;
	printf("Element %d popped from queue\n",d);
	return d;
}

int queuesize(queue*q)
{
	if(q->front==-1)
	return 0;
	return (q->capacity-q->front+q->rear+1)%q->capacity;
}

int main()
{
	queue*q=createqueue(5);
	enqueue(q,9);
	enqueue(q,2);
	enqueue(q,4);
	enqueue(q,7);
	enqueue(q,8);
	printf("Queue size is = %d\n",queuesize(q));
	dequeue(q);
	dequeue(q);
	printf("Queue size is = %d\n",queuesize(q));
	dequeue(q);
	enqueue(q,11);
	dequeue(q);
	dequeue(q);
	dequeue(q);
	dequeue(q);
printf("Queue size is = %d\n",queuesize(q));
	
	return 0;
}
