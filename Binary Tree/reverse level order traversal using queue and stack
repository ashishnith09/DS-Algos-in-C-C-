#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
}node;

typedef struct Queue
{
	node*tnode;
	struct Queue*next;
}queue;

typedef struct Stack
{
	node*tnode;
	struct Stack*next;
}stack;

node*createnode(int d)
{
	node*n=(node*)malloc(sizeof(node));
	n->data=d;
	n->left=n->right=NULL;
	return n;
}

queue*createqueue(node*n)
{
	queue*q=(queue*)malloc(sizeof(queue));
	q->tnode=n;
	q->next=NULL;
	return q;
}

stack*createstack(node*n)
{
	stack*s=(stack*)malloc(sizeof(stack));
	s->tnode=n;
	s->next=NULL;
	return s;
}

void enqueue(queue**front,queue**rear,node*n)
{
	queue*q=createqueue(n);
	if(*front==NULL)
	{
		q->next=*front;
		*front=q;
		*rear=q;
		return;
	}
	(*rear)->next=q;
	*rear=q;
}

node*dequeue(queue**front,queue**rear)
{
	if(*front==NULL)
	{
		exit(0);
	}
	queue*temp=*front;
	(*front)=(*front)->next;
	if(*front==NULL)
	*rear=NULL;
	
	node*n=temp->tnode;
	free(temp);
	return n;
}

void push(stack**top,node*n)
{
	stack*s=createstack(n);
	s->next=*top;
	*top=s;
}

node*pop(stack**top)
{
	if(*top==NULL)
	{
		exit(0);
	}
	stack*temp=*top;
	(*top)=(*top)->next;
	node*n=temp->tnode;
	free(temp);
	return n;
}

void reverselevelorder(node*root)
{
	queue*front=NULL,*rear=NULL;
	stack*top=NULL;
	enqueue(&front,&rear,root);
	node*temp;
	while(front && rear)
	{
		temp=dequeue(&front,&rear);
		push(&top,temp);
		
		if(temp->right)
		enqueue(&front,&rear,temp->right);
		
		if(temp->left)
		enqueue(&front,&rear,temp->left);
	}
	
	while(top)
	{
		node*n=pop(&top);
		printf("%d ",n->data);
	}
}

int main()
{
	node*root=NULL;
	root=createnode(1);
	root->left=createnode(2);
	root->right=createnode(3);
	root->left->left=createnode(4);;
	root->left->right=createnode(5);
	root->right->left=createnode(6);
	root->right->right=createnode(7);
	reverselevelorder(root);
	
	return 0;
}
