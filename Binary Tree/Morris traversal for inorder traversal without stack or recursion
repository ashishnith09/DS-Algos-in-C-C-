#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
}node;

node*createnode(int d)
{
	node*n=(node*)malloc(sizeof(node));
	n->data=d;
	n->left=n->right=NULL;
	return n;
}

node*findpredecessor(node*pre,node*current)
{
	while(pre->right!=NULL && pre->right!=current)
	pre=pre->right;
	
	return pre;
}

void morristraversal(node*root)
{
	if(root==NULL)
	return;
	
	while(root)
	{
		//if left tree is null then current node is printed
		if(root->left==NULL)
		{
			printf("%d ",root->data);
			root=root->right;
		}
		else
		{
		
		
		node*pre=root->left;
		pre=findpredecessor(pre,root);
		
		if(pre->right==NULL)
		{
			pre->right=root;
			root=root->left;
		}
		else
		{
			pre->right=NULL;
			printf("%d ",root->data);
			root=root->right;
		}
	}
		
	}
}

int main()
{
	node*root=NULL;
	root=createnode(1);
	root->left=createnode(2);
	root->right=createnode(3);
	root->left->left=createnode(4);
	root->left->right=createnode(5);
	root->right->left=createnode(6);
	root->right->right=createnode(7);
	
	morristraversal(root);
	return 0;
}
