#include<iostream>
#include<list>

using namespace std;

class Graph
{
	int V;
	list<int>*adj;
	public:
		Graph(int V);
		void addEdge(int v,int w);
		Graph transpose();
		void DFS(int v,int visited[]);		
};

Graph::Graph(int V)
{
	this->V=V;
	this->adj=new list<int>[V];
}

void Graph::addEdge(int v,int w)
{
	adj[v].push_back(w);
}

void Graph::DFS(int u,int visited[])
{
	visited[u]=1;
	cout<<u;
	
	list<int>::iterator i;
	
	for(i=adj[u].begin();i!=adj[u].end();i++)
	{
		if(visited[*i]==0)
		DFS(*i,visited);
		
	}
}

Graph Graph::transpose()
{
	Graph g(V);
	list<int>::iterator i;
	
	for(int v=0;v<V;v++)
	{
		for(i=adj[v].begin();i!=adj[v].end();i++)
		{
			g.adj[*i].push_back(v);
		}
	}
	return g;
}

int main()
{
	Graph g(4);
	g.addEdge(0,1);
	g.addEdge(1,2);
	g.addEdge(2,3);
	g.addEdge(3,0);
	
	
	
	cout<<"DFS traversal of graph\n";
	int visited[4];
	for(int i=0;i<4;i++)
	visited[i]=0;
	
	g.DFS(0,visited);
	//reverse the graph
	
	Graph gr=g.transpose();
	cout<<"\nDFS traversal of reverse of graph\n";
	for(int i=0;i<4;i++)
	visited[i]=0;
	
	for(int i=0;i<4;i++)
	if(visited[i]==0)
	gr.DFS(i,visited);
	
	return 0;
}
