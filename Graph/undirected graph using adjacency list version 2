#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int vertex;
	struct Node*next;
}node;

typedef struct List
{
	node*head;//to point to head node of 
}list;

typedef struct Graph
{
	int v;
	list*array;
}graph;

node*createnode(int dest)
{
	node*newnode=(node*)malloc(sizeof(node));
	newnode->vertex=dest;
	newnode->next=NULL;
	return newnode;
}

graph*creategraph(int v)
{
	graph*g=(graph*)malloc(sizeof(graph));
	g->v=v;
	
	g->array=(list*)malloc(sizeof(list)*v);
	
	for(int i=0;i<v;i++)
	g->array[i].head=NULL;
	
	return g;
}

void addedge(graph*g,int src,int dest)
{
	//createnode for the dest first
	node*d=createnode(dest);
	d->next=g->array[src].head;
	g->array[src].head=d;
	
	//unidirected graph
	
	node*s=createnode(src);
	s->next=g->array[dest].head;
	g->array[dest].head=s;
}

void printgraph(graph*g)
{
	for(int i=0;i<g->v;i++)
	{
		node*p=g->array[i].head;
		
		while(p)
		{
			printf("%d ",p->vertex);
			p=p->next;
		}
		printf("\n");
	}
}

void dfsUtil(graph*g,int visit[],int x)
{
	visit[x]=1;
	printf("%d ",x);
	node*p=g->array[x].head;
	
	while(p)
	{
		if(visit[p->vertex]==0)
		dfsUtil(g,visit,p->vertex);
		p=p->next;
	}
}

void dfs(graph*g)
{
	int visit[g->v];
	for(int i=0;i<g->v;i++)
	visit[i]=0;
	
	printf("DFS traversal fo graph\n\n");
	
	//for(int i=0;i<g->v;i++)
	dfsUtil(g,visit,0);
}

int main()
{
	
	int v=5;
	graph*g=creategraph(v);
	addedge(g,0,1);
	addedge(g,0,4);
	addedge(g,1,2);
	addedge(g,1,3);
	addedge(g,1,4);
	addedge(g,2,3);
    addedge(g,3,4);
	
	printgraph(g);
	
	dfs(g);
}
