#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

#define V 5

int minkey(int key[],int mstset[])
{
	int min=INT_MAX,min_index;
	
	for(int v=0;v<V;v++)
	{
		if(key[v]<min && mstset[v]==0)
		{
			min=key[v];
			min_index=v;
		}
	}
	return min_index;
}

void print(int parent[],int n,int graph[V][V])
{
	printf("Edge   Weight\n");
	for(int i=1;i<V;i++)
	{
		printf("%d- %d   %d\n",parent[i],i,graph[i][parent[i]]);
	}
}

void primMST(int graph[V][V])
{
	int parent[V];
	int key[V];
	int mstset[V];
	
	for(int i=0;i<V;i++)
	{
		key[i]=INT_MAX;
		mstset[i]=0;
	}
	
	key[0]=0;
	parent[0]=-1;
	
	for(int count=0;count<V-1;count++)
	{
		int u=minkey(key,mstset);
		
		mstset[u]=1;
		
		for(int v=0;v<V;v++)
		{
			if(graph[u][v] && mstset[v]==0 && graph[u][v]<key[v])
			{
				parent[v]=u;
				key[v]=graph[u][v];
			}
		}
		
	}
	print(parent,V,graph);
}


int main()
{
	/* Let us create the following graph
          2    3
      (0)--(1)--(2)
       |   / \   |
      6| 8/   \5 |7
       | /     \ |
      (3)-------(4)
            9          */
   int graph[V][V] = {{0, 2, 0, 6, 0},
                      {2, 0, 3, 8, 5},
                      {0, 3, 0, 0, 7},
                      {6, 8, 0, 0, 9},
                      {0, 5, 7, 9, 0},
                     };
 
    // Print the solution
    primMST(graph);
 
    return 0;
}
