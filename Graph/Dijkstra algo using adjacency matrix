#include<stdio.h>
#include<stdlib.h>

#define V 9

int mindistance(int dist[],int spset[])
{
	int min=INT_MAX;
	int index;
	
	for(int i=0;i<V;i++)
	{
		if(spset[i]==0 && dist[i]<=min)
		{
			min=dist[i];
			index=i;
		}
	}
	return index;
}


void printparent(int parent[],int j)
{
if (parent[j]==-1)
        return;
 
    printparent(parent, parent[j]);
 
    printf("%d ", j);
}

void printsolution(int dist[],int n,int parent[])
{
	int src=0;
	printf("Vertex distance from source\n");
	
	for(int i=1;i<n;i++)
	{
	printf("%d %d %d \n",src,i,dist[i]);
	printparent(parent,i);
	printf("\n");
}
}


void dijkstra(int graph[V][V],int src)
{
	int parent[V];
	parent[src]=-1;
	int dist[V];
	int spset[V];
	for(int i=0;i<V;i++)
	{
	dist[i]=INT_MAX;
	spset[i]=0;
}
	dist[src]=0;
	
	for(int i=0;i<V-1;i++)
	{
		int u=mindistance(dist,spset);
		
		spset[u]=1;
		//all adjacent vertices
		
		for(int v=0;v<V;v++)
		{
			if(spset[v]==0 && graph[u][v] && dist[u]!=INT_MAX && dist[u]+graph[u][v]<dist[v])
			{
			dist[v]=dist[u]+graph[u][v];
			parent[v]=u;
		}
		}
	}
	printsolution(dist,V,parent);
	printparent(parent,V);
}

int main()
{
		int graph[V][V]={{0, 4, 0, 0, 0, 0, 0, 8, 0},
                      {4, 0, 8, 0, 0, 0, 0, 11, 0},
                      {0, 8, 0, 7, 0, 4, 0, 0, 2},
                      {0, 0, 7, 0, 9, 14, 0, 0, 0},
                      {0, 0, 0, 9, 0, 10, 0, 0, 0},
                      {0, 0, 4, 14, 10, 0, 2, 0, 0},
                      {0, 0, 0, 0, 0, 2, 0, 1, 6},
                      {8, 11, 0, 0, 0, 0, 1, 0, 7},
                      {0, 0, 2, 0, 0, 0, 6, 7, 0}
                     };
                     
                     dijkstra(graph,0);
}
