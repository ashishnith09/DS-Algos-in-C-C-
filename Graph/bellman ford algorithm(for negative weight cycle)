//bellman ford for negative weight edges
#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
#include<string.h>

typedef struct Edge
{
	int src,dest,weight;
}edge;

typedef struct Graph
{
	int V,E;
	edge*edge;
}graph;

graph*creategraph(int V,int E)
{
	graph*g=(graph*)malloc(sizeof(graph));
	g->V=V;
	g->E=E;
	g->edge=(edge*)malloc(sizeof(edge)*E);
	return g;
}

void printarray(int dist[],int V)
{
	printf("Vertex distance from source\n");
	for(int i=0;i<V;i++)
	{
		printf("%d\t\t%d\n",i,dist[i]);
	}
}

void BellmanFord(graph*g,int src)
{
	int V=g->V;
	int E=g->E;
	
	int dist[V];
	
	for(int i=0;i<V;i++)
	dist[i]=INT_MAX;
	
	dist[src]=0;
	//relax all edges run v-1 loops
	
	// Step 2: Relax all edges |V| - 1 times. A simple shortest 
    // path from src to any other vertex can have at-most |V| - 1 
    // edges
    
    for(int i=1;i<=V-1;i++)
    {
    	for(int j=0;j<E;j++)
    	{
    		int u=g->edge[j].src;
    		int v=g->edge[j].dest;
    		int weight=g->edge[j].weight;
    		
    		if(dist[u]!=INT_MAX && dist[v]>dist[u]+weight)
    		dist[v]=dist[u]+weight;
		}
	}
	
	for(int i=0;i<E;i++)
	{
		int u=g->edge[i].src;
		int v=g->edge[i].dest;
		int weight=g->edge[i].weight;
		
		if(dist[u]!=INT_MAX && dist[v]>dist[u]+weight)
		{
			printf("Graph contains cycle\n");
			return ;
		}
	}
	printarray(dist,V);
	return;
}

int main()
{
	int V=5;
	int E=8;
	
	graph*g=creategraph(V,E);
	
	g->edge[0].src = 0;
    g->edge[0].dest = 1;
    g->edge[0].weight = -1;

    // add edge 0-2 (or A-C in above figure)
    g->edge[1].src = 0;
    g->edge[1].dest = 2;
    g->edge[1].weight = 4;

    // add edge 1-2 (or B-C in above figure)
    g->edge[2].src = 1;
    g->edge[2].dest = 2;
    g->edge[2].weight = 3;

    // add edge 1-3 (or B-D in above figure)
    g->edge[3].src = 1;
    g->edge[3].dest = 3;
    g->edge[3].weight = 2;

    // add edge 1-4 (or A-E in above figure)
    g->edge[4].src = 1;
    g->edge[4].dest = 4;
    g->edge[4].weight = 2;

    // add edge 3-2 (or D-C in above figure)
    g->edge[5].src = 3;
    g->edge[5].dest = 2;
    g->edge[5].weight = 5;

    // add edge 3-1 (or D-B in above figure)
    g->edge[6].src = 3;
    g->edge[6].dest = 1;
    g->edge[6].weight = 1;

    // add edge 4-3 (or E-D in above figure)
    g->edge[7].src = 4;
    g->edge[7].dest = 3;
    g->edge[7].weight = -3;

    BellmanFord(g, 0);

	return 0;
}
