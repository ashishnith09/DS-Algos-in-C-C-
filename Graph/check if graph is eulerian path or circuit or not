#include<iostream>
#include<list>

using namespace std;

typedef struct Graph
{
	int V;
	list<int> *adj;
	public:
		Graph(int V)
		{
			this->V=V;
			adj=new list<int>[V];
		}
		~Graph()
		{
			delete[] adj;
		}
		
		void addEdge(int v,int w);
		int isEulerian();
		int isConnected();
		void DFSUtil(int v,int visited[]);
}graph;

void graph::addEdge(int v,int w)
{
	adj[v].push_back(w);
	adj[w].push_back(v);
}

void graph::DFSUtil(int v,int visited[])
{
	visited[v]=1;
	
	list<int>::iterator i;
	
	for(i=adj[v].begin();i!=adj[v].end();i++)
	{
		if(visited[*i]==0)
		DFSUtil(*i,visited);
	}
}
// Method to check if all non-zero degree vertices are connected.
// It mainly does DFS traversal starting from
int graph::isConnected()
{
	int visited[V];
	int i;
	for(i=0;i<V;i++)
	visited[i]=0;
	
	//find a vertex with non-zero degree
	for(i=0;i<V;i++)
	if(adj[i].size()!=0)
	break;
	
	DFSUtil(i,visited);
	
	for(int i=0;i<V;i++)
	if(visited[i]==0 && adj[i].size()>0)
	return 0;
	
	return 1;
	
}

int graph::isEulerian()
{
	if(isConnected()==0)
	return 0;
	
	int odd=0;
	
	for(int i=0;i<V;i++)
	if(adj[i].size()>0)
	odd++;
	
	if(odd>2)
	return 0;
	
	if(odd==2)
	return 1;
	
	if(odd==0)
	return 2;	
	
}

void test(Graph g)
{
    int res = g.isEulerian();
    if (res == 0)
        cout << "graph is not Eulerian\n";
    else if (res == 1)
        cout << "graph has a Euler path\n";
    else
        cout << "graph has a Euler cycle\n";
}

int main()
{
	Graph g1(5);
    g1.addEdge(1, 0);
    g1.addEdge(0, 2);
    g1.addEdge(2, 1);
    g1.addEdge(0, 3);
    g1.addEdge(3, 4);
    test(g1);
 
    Graph g2(5);
    g2.addEdge(1, 0);
    g2.addEdge(0, 2);
    g2.addEdge(2, 1);
    g2.addEdge(0, 3);
    g2.addEdge(3, 4);
    g2.addEdge(4, 0);
    test(g2);
 
    Graph g3(5);
    g3.addEdge(1, 0);
    g3.addEdge(0, 2);
    g3.addEdge(2, 1);
    g3.addEdge(0, 3);
    g3.addEdge(3, 4);
    g3.addEdge(1, 3);
    test(g3);
 
    // Let us create a graph with 3 vertices
    // connected in the form of cycle
    Graph g4(3);
    g4.addEdge(0, 1);
    g4.addEdge(1, 2);
    g4.addEdge(2, 0);
    test(g4);
 
    // Let us create a graph with all veritces
    // with zero degree
    Graph g5(3);
    test(g5);
	
	return 0;
}
