#include<stdio.h>
#include<iostream>
#include<queue>
#include<stdlib.h>

using namespace std;

typedef struct Graph

{

int v;

int e;

int**adj;

}graph;

graph*creategraph()

{

int u,v,ver,edg,i;

graph*g=(graph*)malloc(sizeof(graph));

printf("enter the no of vertices\n");

scanf("%d",&g->v);

printf("enter the no of edges\n");

scanf("%d",&g->e);

ver=g->v;

edg=ver*(ver-1)/2;

if(g->e<=edg)

{

g->adj=(int**)malloc(g->v*sizeof(int*));

for(i=0;i<g->v;i++)

{

g->adj[i]=(int*)malloc(sizeof(int)*g->v);

}
for(u=0;u<g->v;u++)
for(v=0;v<g->v;v++)
g->adj[u][v]=0;

for(i=0;i<g->e;i++)

{

printf("Reading the edges from vetice u to v\n");

scanf("%d\n%d",&u,&v);

g->adj[u][v]=1;

g->adj[v][u]=1;

}

}

return g;

}

void read(graph*g)

{

int i,j;

for(i=0;i<g->v;i++)

{

for(j=0;j<g->v;j++)

printf("%4d",g->adj[i][j]);

printf("\n");
}
}

void bfsUtil(graph*g,queue<int> q,int x,int visited[])
{
	visited[x]=1;
	
	q.push(x);
	while(!q.empty())
	{
		int u=q.front();
		q.pop();
		printf("%d ",u);
		visited[u]=1;
		for(int i=0;i<g->v;i++)
		{
		if(!visited[i] && g->adj[u][i])
	q.push(i);	
}
}
}

void bfs(graph*g)
{
	queue<int>q;
	int visited[g->v];
	for(int i=0;i<g->v;i++)
	visited[i]=0;
	
	printf("BFS traversal of Graph is \n\n");
	bfsUtil(g,q,0,visited);
}

int main()

{

graph*g=creategraph();

read(g);
bfs(g);
return 0;

}
