#include<stdio.h>
#include<queue>
#include<iostream>
#include<stdlib.h>

using namespace std;

typedef struct Listnode

{

int vertex;

struct Listnode*next;

}listnode;

typedef struct Graph

{

int v;

int e;

listnode**adj;

}graph;

graph*creategraph()

{

int i,x,y;

listnode*temp;

graph*g=(graph*)malloc(sizeof(graph));

printf("enter the number of vertices and edges\n");

scanf("%d\n%d",&g->v,&g->e);

g->adj=(listnode**)malloc(g->v*(sizeof(listnode*)));

//allocating pointers to head

for(i=0;i<g->v;i++)

{
g->adj[i]=(listnode*)malloc(sizeof(listnode));
g->adj[i]->vertex=i;

g->adj[i]->next=NULL;

}

for(i=0;i<g->e;i++)

{

printf("reading the edge\n");

scanf("%d\n%d",&x,&y);

temp=(listnode*)malloc(sizeof(listnode));

temp->vertex=y;

temp->next=g->adj[x]->next;

g->adj[x]->next=temp;

//undirected

/*temp=(listnode*)malloc(sizeof(listnode));

temp->vertex=x;

temp->next=g->adj[y]->next;

g->adj[y]->next=temp;
*/

}

return g;

}

void read(graph*g)

{

int i;

for(i=0;i<g->v;i++)

{

listnode*p;

//printf("%d->",g->adj[i]->vertex);

p=g->adj[i];

while(p)

{

printf("%d->",p->vertex);

p=p->next;

}

printf("\n");

}
}

void topologicalsort(graph*g,int indegree[])
{
queue<listnode*>q;
listnode*x;
for(int v=0;v<g->v;v++)	
{
	if(indegree[v]==0)
	q.push(g->adj[v]);
	
}	

	while(!q.empty())
	{
	x=g->adj[q.front()->vertex];
	printf("%d ",x->vertex);
	q.pop();
	x=x->next;
	while(x)
	{
		if(--indegree[x->vertex]==0)
		q.push(x);
		x=x->next;
	}
	
	}
while(!q.empty())
{
x=q.front();
	printf("%d ",x->vertex);	
}
}

int main()

{

graph*g=creategraph();

read(g);
int indegree[g->v];
for(int i=0;i<g->v;i++)
indegree[i]=0;
//calculate indegree
for(int i=0;i<g->v;i++)
{
listnode*p=g->adj[i];

p=p->next;
while(p)
{
	indegree[p->vertex]++;
	p=p->next;
}
}

topologicalsort(g,indegree);
return 0;

}
