#include<stdio.h>
#include<stdlib.h>

typedef struct kstack
{
	int *top;
	int*next;
	int n,k,free;
	int*array;
}stack;

stack*createstack(int capacity,int k)
{
	stack*s=(stack*)malloc(sizeof(stack));
	s->n=capacity;
	s->k=k;
	s->next=(int*)malloc(sizeof(int)*capacity);
	s->top=(int*)malloc(sizeof(int)*k);;
	s->array=(int*)malloc(sizeof(int)*capacity);;
	s->free=0;
	int i;
	
	for(i=0;i<k;i++)
	s->top[i]=-1;
	
	for(i=0;i<capacity-1;i++)
	s->next[i]=i+1;
	
	s->next[i]=-1;
	
	return s;
	
}

int Isfull(stack*s)
{
	return s->free==-1;
}

int Isempty(stack*s,int sn)
{
	return s->top[sn]==-1;
}

void push(stack*s,int sn,int item)
{
	if(Isfull(s))
	{
		printf("Stack overflow\n");
		return;
	}
	int i=s->free;
	s->free=s->next[i];
	s->next[i]=s->top[sn];
	s->top[sn]=i;
	s->array[i]=item;
	
	printf("%d Pushed to stack %d\n",item,sn);
}

int pop(stack*s,int sn)
{
if(Isempty(s,sn))	
{
	printf("Stack underflow\n");
	return INT_MIN;
}
int i=s->top[sn];
s->top[sn]=s->next[i];
s->next[i]=s->free;
s->free=i;

return s->array[i];
}

int peek(stack*s,int sn)
{
	if(Isempty(s,sn))
	{
		printf("Stack underflow\n");
		return INT_MIN;
	}
	return s->array[s->top[sn]];
}

void print(stack*s,int sn)
{
	int i;
	for(i=s->top[sn];i!=-1;i=s->next[i])
	printf("%d->",s->array[i]);
	
	printf("\n");
}

int main()
{
	stack*s=createstack(10,3);
	printf("Stack 0\n");
	push(s,0,4);
	push(s,0,7);
	push(s,0,9);
	push(s,0,16);
	print(s,0);
	push(s,1,3);
	push(s,1,2);
	push(s,1,1);
	push(s,1,8);
	print(s,1);
	push(s,2,99);
	push(s,2,88);
	push(s,2,77);
	print(s,2);
	return 0;
}

