#include<iostream>
#include<stdlib.h>
#include<stack>
using namespace std;

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
}node;

node*createnode(int d)
{
	node*n=(node*)malloc(sizeof(node));
	n->data=d;
	n->left=n->right=NULL;
	return n;
}

void inorder(node*root)
{
	if(root==NULL)
	return;
	inorder(root->left);
	printf("%d ",root->data);
	inorder(root->right);
}

node* insert(node*root,int d)
{
	if(root==NULL)
	return createnode(d);
	
	if(d<root->data)
	root->left=insert(root->left,d);
	else if(d>root->data)
	root->right=insert(root->right,d);

	return root;
}

void printcommon(node*root1,node*root2)
{
	stack<node*> s1,s2;
	
	while(1)
	{
		if(root1)
		{
			s1.push(root1);
			root1=root1->left;
		}
		else if(root2)
		{
			s2.push(root2);
			root2=root2->left;
		}
		else if(!s1.empty() && !s2.empty())
		{
			root1=s1.top();
			root2=s2.top();
			
			if(root1->data==root2->data)
			{
				cout<<root1->data<<" ";
				s1.pop();
				s2.pop();
				root1=root1->right;
				root2=root2->right;
			}
			else if(root1->data<root2->data)
			{
				s1.pop();
				root1=root1->right;
				// root2 is set to NULL, because we need
                // new Nodes of tree 1
				root2=NULL;
			}
			else if(root1->data>root2->data)
			{
				s2.pop();
				root2=root2->right;
				root1=NULL;
			}
		}
		else
		break;
	}
}

int main()
{
	node*root1=NULL;
	root1=insert(root1,5);
    insert(root1,1);
    insert(root1,10);
    insert(root1,0);
    insert(root1,4);
    insert(root1,7);
    insert(root1,9);
    
    node*root2=NULL;
    root2=insert(root2,10);
    insert(root2,7);
    insert(root2,20);
    insert(root2,4);
    insert(root2,9);
    
    inorder(root1);
    printf("\n");
    inorder(root2);
    printf("\n");
    printcommon(root1,root2);
    
    return 0;
}
