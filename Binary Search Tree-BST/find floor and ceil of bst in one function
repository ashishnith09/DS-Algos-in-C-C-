#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
}node;

node*createnode(int d)
{
	node*n=(node*)malloc(sizeof(node));
	n->data=d;
	n->left=n->right=NULL;
	return n;
}

void inorder(node*root)
{
	if(root==NULL)
	return;
	inorder(root->left);
	printf("%d ",root->data);
	inorder(root->right);
}

node* insert(node*root,int d)
{
	if(root==NULL)
	return createnode(d);
	
	if(d<root->data)
	root->left=insert(root->left,d);
	else if(d>root->data)
	root->right=insert(root->right,d);

	return root;
}

void floorceil(node*root,node**floor,node**ceil,int d)
{
	if(root==NULL)
	return;
	
	if(root->data==d)
	{
		*floor=root;
		*ceil=root;
		return;
	}
	
	if(root->data<d)
	*floor=root;

	if(root->data>d)
	*ceil=root;
	
	if(root->data>d)
	floorceil(root->left,floor,ceil,d);
	else if(root->data<d)
	floorceil(root->right,floor,ceil,d);
}

int main()
{
	node*root=NULL;
	root=insert(root,50);
    insert(root,30);
    insert(root,20);
    insert(root,40);
    insert(root,70);
    insert(root,60);
    insert(root,80);
    int k=10;
    
    node*floor=NULL,*ceil=NULL;
    floorceil(root,&floor,&ceil,k);
    
    if(floor)
    printf("Floor of %d is = %d\n",k,floor->data);
    else
    printf("floor does not exist\n");
    
    if(ceil)
    printf("\nCeiling of %d is = %d",k,ceil->data);
    else
    printf("\nCeiling does not exist");
    
   
	return 0;
}
