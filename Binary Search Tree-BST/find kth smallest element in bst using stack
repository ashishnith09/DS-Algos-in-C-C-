#include<iostream>
#include<stack>
using namespace std;

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
}node;

node*createnode(int d)
{
	node*n=new node;
	n->data=d;
	n->left=n->right=NULL;
	return n;
}

node*insert(node*root,int d)
{
	if(root==NULL)
	return createnode(d);
	
	if(root->data>d)
	root->left=insert(root->left,d);
	else if(root->data<d)
	root->right=insert(root->right,d);
	return root;
}

void inorder(node*root)
{
	if(root==NULL)
	return;
	
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}

node*findkth(node*root,int k)
{
	if(root==NULL || k==0)
	return NULL;
	stack<node*> st;
	int c=0;
	while(root)
	{
		while(root)
		{
			st.push(root);
			root=root->left;
		}
		
	while(!st.empty())
	{
		node*p=st.top();
		st.pop();
		c++;
		
		if(c==k)
		{
			printf("%d\n",c);
			return p;
		}
		if(p->right)
		{
			root=p->right;
			break;
		}
	}
		
	}
	return NULL;
}

int main()
{
	node*root=NULL;
	root=insert(root,50);
    insert(root,30);
    insert(root,20);
    insert(root,40);
    insert(root,70);
    insert(root,60);
    insert(root,80);
    
    inorder(root);
    int k=4;
    node*kth=findkth(root,k);
    
    if(kth)
    printf("\nKth node is %d ",kth->data);
    else
    printf("\nNo node exists");
	return 0;
}
