#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
	int height;
}node;

node*createnode(int d)
{
	node*n=(node*)malloc(sizeof(node));
	n->data=d;
	n->left=n->right=NULL;
	n->height=1;
	return n;
}

int height(node*n)
{
	if(n==NULL)
	return 0;
	return n->height;
}

int max(int a,int b)
{
	return (a>b)?a:b;
}

int getbalance(node*n)
{
	if(n==NULL)
	return 0;
	return height(n->left)-height(n->right);
}

void preorder(node*root)
{
	if(root==NULL)
	return;
	printf("%d ",root->data);
	preorder(root->left);
	preorder(root->right);
}

node*rightrotate(node*root)
{
	node*temp=root->left;
	node*t1=temp->right;
	
	temp->right=root;
	root->left=t1;
	
	root->height=max(height(root->left),height(root->right))+1;
	temp->height=max(height(root->left),height(root->right))+1;
	
	return temp;
}

node*leftrotate(node*root)
{
	node*temp=root->right;
	node*t1=temp->left;
	
	temp->left=root;
	root->right=t1;
	
	root->height=max(height(root->left),height(root->right))+1;
	temp->height=max(height(temp->left),height(root->right))+1;
	return temp;
}

// Recursive function to insert key in subtree rooted
// with node and returns new root of subtree.
node*insert(node*root,int key)
{
	/* 1.  Perform the normal BST insertion */
	if(root==NULL)
	return createnode(key);
	
	if(root->data>key)
	root->left=insert(root->left,key);
	else if(root->data<key)
	root->right=insert(root->right,key);
	else  // Equal keys are not allowed in BST
	return root;
	
	 /* 2. Update height of this ancestor node */
	root->height=1+max(height(root->left),height(root->right));
	
	/* 3. Get the balance factor of this ancestor
          node to check whether this node became
          unbalanced */
	int balance=getbalance(root);
	
	//If this node becomes unbalanced, then
    // there are 4 cases
    
    //left left case
	if(balance>1 && key<root->left->data)
	{
		return rightrotate(root);
	}
	if(balance<-1 && key>root->right->data)//right right case
	{
		return leftrotate(root);
	}
	if(balance>1 && key>root->left->data)//left right case
	{
		root->left=leftrotate(root->left);
		return rightrotate(root);
	}
	if(balance<-1 && key<root->right->data)//right left case
	{
		root->right=rightrotate(root->right);
		return leftrotate(root);
	}
	return root;
}

node*getmin(node*root)
{
	while(root->left)
	root=root->left;
	
	return root;
}

node*deletenode(node*root,int d)
{
	if(root==NULL)
	return root;
	node*temp;
	if(root->data>d)
	root->left=deletenode(root->left,d);
	else if(root->data<d)
	root->right=deletenode(root->right,d);
	else
	{
		if(root->left==NULL)
		{
		temp=root->right;
		free(root)	;
		return temp;
		}
		else if(root->right==NULL)
		{
			temp=root->left;
			free(root);
			return temp;
		}
		else
		{
			node*temp=getmin(root->right);	
			root->data=temp->data;
			root->right=deletenode(root->right,temp->data);
		}
	}
	//if(root=NULL)
	//return root;
	
	root->height=1+max(height(root->left),height(root->right));
	int balance=getbalance(root);
	
	//left left case
	if(balance>1 && getbalance(root->left)>=0)
	rightrotate(root);
	//left right case
	if(balance>1 && getbalance(root->left)<0)
	{
	root->left=leftrotate(root->left);
	return rightrotate(root);
	
	}	
	if(balance<-1 && getbalance(root->right)<=0)
	{
		leftrotate(root);
	}
	if(balance<-1 && getbalance(root->right)>0)
	{
		root->right=rightrotate(root->right);
		return leftrotate(root);
	}
	return root;
}

int main()
{
	node*root=NULL;
	root=insert(root,9);
	root=insert(root,5);
	root=insert(root,10);
	root=insert(root,0);
	root=insert(root,6);
	root=insert(root,11);
	root=insert(root,-1);
	root=insert(root,1);
	root=insert(root,2);
	
	preorder(root);
	root=deletenode(root,10);
	printf("\nAfter deletion of node \n");
	preorder(root);
	return 0;
}
