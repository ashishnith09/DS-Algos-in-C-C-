//convert bst to threared bst in O(n) time and stack space : O(n)
#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
	int isright;
}node;

node*createnode(int d)
{
	node*n=(node*)malloc(sizeof(node));
	n->data=d;
	n->left=n->right=NULL;
	n->isright=0;
	return n;
}

void inorder(node*root)
{
	if(root==NULL)
	return;
	inorder(root->left);
	printf("%d ",root->data);
	inorder(root->right);
}

node* insert(node*root,int d)
{
	if(root==NULL)
	return createnode(d);
	
	if(d<root->data)
	root->left=insert(root->left,d);
	else if(d>root->data)
	root->right=insert(root->right,d);

	return root;
}

void createthreaded(node*root,node**succ)
{
	if(root==NULL)
	return;
	createthreaded(root->right,succ);
	
	if(root->right==NULL)
	{
		root->right=*succ;
		root->isright=1;
	}
	*succ=root;
	createthreaded(root->left,succ);
}
node*leftmost(node*root)
{
	while(root->left)
	root=root->left;
	
	return root;
}

void inorderthread(node*root)
{
	if(root==NULL)
	return;
	node*curr=leftmost(root);
	
	while(curr)
	{
		printf("%d ",curr->data);
		if(curr->isright)
		curr=curr->right;
		else
		curr=leftmost(curr->right);
	}
}

int main()
{
	node*root=NULL;
	root=insert(root,50);
    insert(root,30);
    insert(root,20);
    insert(root,40);
    insert(root,70);
    insert(root,60);
    insert(root,80);
    inorder(root);
    printf("\n");
    node*succ=NULL;
    createthreaded(root,&succ);
    inorderthread(root);
	return 0;
}
