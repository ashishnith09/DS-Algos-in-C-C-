#include<iostream>
using namespace std;

typedef struct Node
{
	int data;
	struct Node*next;
}node;

node*createnode(int d)
{
	node*n=new node;
	n->data=d;
	n->next=NULL;
	return n;
}

void push(node**headf,int d)
{
	node*n=createnode(d);
	n->next=*headf;
	*headf=n;
}

void print(node*head)
{
	while(head)
	{
		cout<<head->data<<"->";
		head=head->next;
	}
	cout<<"NULL"<<endl;
}

void reverse(node**headf)
{
	node*curr=*headf;
	node*prev=NULL;
	node*temp;
	while(curr)
	{
		temp=curr->next;
		curr->next=prev;
		prev=curr;
		curr=temp;
	}
	*headf=prev;
}

void split(node*head,node**a,node**b,int k)
{
	node*curr=head;
	node*prev;
for(int i=0;i<k;i++)
{
prev=curr;
curr=curr->next;	
}
prev->next=NULL;
*a=prev;
*b=curr;

}

void rotateK(node**headf,int k)
{
	//rotate from 1 to k and k+1 to nth
	//split it into kth and k+1 to nth
	node*p,*q;
	//spit it into first to kth node and k+1th node to nth node
	split(*headf,&p,&q,k);
	//reverse each of them
	reverse(headf);
	reverse(&q);
	node*curr=*headf;
	while(curr->next)
	curr=curr->next;
	
	//attache kth to k+1th node
	curr->next=q;
	//reverse whole list again
	reverse(headf);

}

int main()
{
	node*root=NULL;
	push(&root,60);
	push(&root,50);
	push(&root,40);
	push(&root,30);
	push(&root,20);
	push(&root,10);
	print(root);
	int k;
	cout<<"enter the no of nodes to be rotated"<<endl;
	cin>>k;
	rotateK(&root,k);
	print(root);
	
	return 0;
}
