//Floyd Loop Remove by counting no of nodes in loop and then starting from head
#include<iostream>

using namespace std;

typedef struct Node
{
	struct Node*next;
	int data;
}node;

node*createnode(int d)
{
	node*n=new node;
	n->data=d;
	n->next=NULL;
	return n;
}

void push(node**headf,int d)
{
	node*n=createnode(d);
	n->next=*headf;
	*headf=n;
}

void print(node*head)
{
	while(head)
	{
		cout<<head->data<<"->";
		head=head->next;
	}
	cout<<"NULL";
}

void removeloop(node*loopnode,node*head)
{
int count=1;
node*ptr1=loopnode;
while(ptr1->next!=loopnode)
{

	ptr1=ptr1->next;
	count++;
}
node*ptr2=head;
ptr1=head;
int k=count;
while(k>0)
{
	k--;
	ptr2=ptr2->next;
}

while(ptr1!=ptr2)
{
	ptr1=ptr1->next;
	ptr2=ptr2->next;
}

while(ptr2->next!=ptr1)
ptr2=ptr2->next;

ptr2->next=NULL;

}

int detectremoveloop(node*head)
{
//find if loop is there or not
node*slow=head,*fast=head;

while(slow && fast && fast->next)
{
	slow=slow->next;
	fast=fast->next->next;
	if(fast==slow)
	{
		
		removeloop(slow,head);
		return 1;
		
	}
}
	return 0;
}


int main()
{
	node*root=NULL;
	root=createnode(1);
	root->next=createnode(2);
	root->next->next=createnode(3);
	root->next->next->next=createnode(4);
	root->next->next->next->next=createnode(5);
	root->next->next->next->next->next=root;
	
	if(detectremoveloop(root))
	cout<<"Loop detected"<<endl;
	else
	cout<<"No loop"<<endl;
	
	print(root);
	return 0;
}
