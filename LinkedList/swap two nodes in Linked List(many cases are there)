#include<iostream>
using namespace std;

typedef struct Node
{
	int data;
	struct Node*next;
}node;

node*createnode(int d)
{
	node*n=new node;
	if(n==NULL)
	{
		cout<<"Invalid memory";
		return NULL;
	}
	n->data=d;
	n->next=NULL;
	return n;
}

void push(node**headf,int d)
{
	node*n=createnode(d);
	n->next=*headf;
	*headf=n;
}

void print(node*headf)
{
	while(headf)
	{
		cout<<headf->data<<"->";
		headf=headf->next;
	}
	cout<<"NULL"<<endl;	
}

void swapnode(node**headf,int x,int y)
{
	if(*headf==NULL || (*headf)->next==NULL)
	{
	printf("Less than two nodes");
	return;	
	}
	node*currx=*headf,*curry=*headf;
	node*prevx,*prevy,*temp;
	//find x
	while(currx && currx->data!=x)
	{
		prevx=currx;
		currx=currx->next;
	}
	if(currx==NULL)
	return;
	
	while(curry && curry->data!=y)
	{
		prevy=curry;
		curry=curry->next;
	}
	
	if(curry==NULL)
	return;

if(prevx!=NULL)
prevx->next=curry;
else
*headf=curry;

if(prevy!=NULL)
prevy->next=currx;
else
*headf=currx;

temp=curry->next;
curry->next=currx->next;
currx->next=temp;

}

int main()
{
	node*root=NULL;
	push(&root,10);
	push(&root,20);
	push(&root,30);
	push(&root,40);
	push(&root,50);
	push(&root,60);
	
	print(root);
	swapnode(&root,40,50);
	print(root);
	
	return 0;
}
